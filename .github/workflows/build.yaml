name: build and package

on:
  push:
    branches:
      - 'main'
  workflow_dispatch:
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron:  '0 0 * * *'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        build_type: [MinSizeRel]
        enable_ui: [on]
            
    steps:
    - uses: actions/checkout@v4
      with:
        repository: 'aseprite/aseprite'
        submodules: 'recursive'
        
    - name: Download and Unzip Skia
      shell: bash
      run: |
        FILE_NAME=""
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          FILE_NAME="Skia-Linux-Release-x64-libstdc++.zip"
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          FILE_NAME="Skia-macOS-Release-x64.zip"
        elif [[ "${{ runner.os }}" == "Windows" ]]; then
          FILE_NAME="Skia-Windows-Release-x64.zip"
        fi
        echo "FILE_NAME=$FILE_NAME"
        SKIA_URL=$(curl -s https://api.github.com/repos/aseprite/skia/releases/latest \
          | jq -r ".assets[] | select(.name==\"$FILE_NAME\") | .browser_download_url")
        echo "SKIA_URL=$SKIA_URL"
        curl -L -o $FILE_NAME $SKIA_URL
        mkdir -p skia
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          powershell -command "Expand-Archive -Path $FILE_NAME -DestinationPath ./skia"
        else
          unzip -q $FILE_NAME -d ./skia
        fi
        
    - name: ccache
      uses: hendrikmuhs/ccache-action@v1
      if: runner.os == 'Linux'
      with:
        key: ${{ matrix.os }}-${{ matrix.enable_ui }}
        
    - uses: turtlesec-no/get-ninja@main
    
    - uses: ilammy/msvc-dev-cmd@v1
      if: runner.os == 'Windows'
      
    - name: Workaround for windows-2022 and cmake 3.25.0
      if: runner.os == 'Windows'
      shell: bash
      run: rm -rf C:/Strawberry/
      
    - name: Install Dependencies
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Linux" ]] ; then
          sudo apt-get update -qq
          sudo apt-get install -y \
            g++ clang libc++-dev libc++abi-dev cmake ninja-build libx11-dev libxcursor-dev libxi-dev libgl1-mesa-dev libfontconfig1-dev
        fi
        
    - name: Generating Makefiles
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Windows" ]] ; then
          export enable_ccache=off
          export skia_lib=./skia/out/Release-x64/skia.lib
        else
          export enable_ccache=on
          export skia_lib=./skia/out/Release-x64/libskia.a
        fi
        cmake -S . -B build -G Ninja \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DCMAKE_OSX_DEPLOYMENT_TARGET=10.9 \
          -DENABLE_TESTS=ON \
          -DENABLE_UI=${{ matrix.enable_ui }} \
          -DLAF_BACKEND=skia \
          -DSKIA_DIR=./skia \
          -DSKIA_LIBRARY_DIR=./skia/out/Release-x64 \
          -DSKIA_LIBRARY=$skia_lib \
          -DENABLE_CCACHE=$enable_ccache
          
    - name: Compiling
      shell: bash
      run: |
        cd build && ninja

    - name: Prepare
      working-directory: build/bin
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          powershell -command "Get-ChildItem -Filter '*_tests*' | Remove-Item -Force"
        else
          rm -f *_tests*
        fi
        echo '# This file is here so Aseprite works as a portable program' > aseprite.ini
        
    - name: Debug
      working-directory: build/
      shell: bash
      run: ls -la
          
    - name: Upload Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-${{ matrix.os }}-${{ matrix.build_type }}-ui_${{ matrix.enable_ui }}
        path: build/bin/
        retention-days: 2
